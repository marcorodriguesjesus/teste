#Parte 1 - Build, Instalação de Dependências, teste unitário#

name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build, Teste e Criação de Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar Dependências
        run: npm install

      - name: Executar Testes Unitários
        run: npm test

      - name: Construir a Aplicação
        run: npm run build

      - name: Limpar Artefatos Anteriores
        run: rm -rf ./build
  
#Parte 2 - Criação do Artefato#

      - name: Preparar Artefato para Release
        run: |
          mkdir -p build
          cp -R index.js app.js package.json build/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ./build

      - name: Remover Tag Existente (se houver)
        run: |
          git fetch --tags
          git tag -d v2.0 || true
          git push origin :refs/tags/v1.0 || true

      - name: Criar Release no GitHub com o Artefato
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v3.0
          name: "Release v3.0 - ${{ github.run_number }}"
          body: "Release gerada para o commit ${{ github.sha }}"
          files: |
            ./build/**
          draft: false
          prerelease: false

#Parte 3- Deploy na EC2 AWS#

  deploy:
    name: Deploy para Ambiente de Teste no EC2
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: test
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Baixar Artefato de Build
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./build

      - name: Configurar Acesso SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ec2-3-144-94-205.us-east-2.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: Enviar Artefatos para o Servidor EC2
        run: |
          ssh ubuntu@ec2-3-144-94-205.us-east-2.compute.amazonaws.com "rm -rf /home/ubuntu/node-app/*"
          scp -r ./build/* ubuntu@ec2-3-144-94-205.us-east-2.compute.amazonaws.com:/home/ubuntu/node-app

      - name: Fazer Deploy no Servidor EC2
        run: |
          ssh ubuntu@ec2-3-144-94-205.us-east-2.compute.amazonaws.com << 'EOF'
          cd /home/ubuntu/node-app
          npm install --production
          pm2 stop index || true
          pm2 start index.js --name node-app
          pm2 save
          EOF

#Parte 4 - Notificação em casos de falhas#

  notify:
    name: Notificar Falhas do Pipeline
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Enviar Notificação por E-mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'Falha no Pipeline CI/CD - Commit ${{ github.sha }}'
          body: |
            O pipeline CI/CD falhou. Verifique os logs para mais detalhes.
          to: marcorodrigues.jesus@gmail.com
          from: 'marcorodrigues.jesus@gmail.com'